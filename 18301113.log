2020.6.29
下载并配置python、pycharm、git等，尝试使用华为云、github，配置flask与spark等前后端开发相关配置。
参与小组内分工。
更新了java版本以适应spark版本。
帮助同学配置环境。

2020.6.30
9:00帮助组内成员配置spark以及创建.log文件。
9:30任务六尝试下载数据，需要外网，多次失败，暂时搁置。
10:00研究flask的安装与配置，尝试前端开发。
11:00继续帮助同学配置环境以及.log文件的上传等操作。
2:00下载虚拟机，但是由于网站原因下载缓慢，后来通过镜像网站下载。
4:00下载完虚拟机开始尝试安装，但是可能存在一定下载问题，安装包总是一闪而过，开始着手重新下载，同时询问其他同学。
今日由于组内同学的电脑环境问题，工作分配改为后端开发，重新着手相关知识的学习。

2020.7.1
上午：通过探访各大论坛，虚拟机安装程序不能打开可能是注册表残留或者版本不匹配。首先利用网友提供的注册表清理工具，使用后仍然不能正常安装，安装程序持续闪退，因此更换了14版本的VMware，并成功安装。
随后开始创建虚拟机。第一次创建的时候没有修改参数，所以导致虚拟机十分卡顿，原因是分配内存过少，后来又尝试64GB内存，想要使用虚拟内存来加快速度，但是提示物理内存不足，只好将虚拟机内存重新设定为4GB。目前仍在自动安装中。
下午：完成虚拟机的网络配置。配置虚拟机网络时，多次在terminal中的vim出现差错，例如esc与：的使用，导致多次重启虚拟机。后来配置完网络因不知名原因导致重启虚拟机后网络开关消失，无法启动虚拟机网络，后来向同学寻求帮助直接
利用terminal打开对应文件手动调出模块。网络设置完成后开始尝试利用xshell来使虚拟机与真实机连接，但是真实机拒绝了虚拟机，目前正在查找原因，可能是真实机中对虚拟机ip地址采用了随机地址的原因。
17:41：目前成功使真实机与虚拟机连接，并修改虚拟机名称完成配置。

2020.7.2
解决了昨日困扰已久的虚拟机问题之后，今天开始着手利用spark进行数据清洗，然后学习ARIMA模型，将通过历史气温来预测未来需要查询的日期气温数值。
上午首先开始逐步学习ARIMA模型原理及实现，其中逐步了解了自回归模型AR，移动平均模型MA，自回归移动平均模型ARMA，差分自回归移动模型ARIMA。
下午为了加快根据实际数据的模型建立速度，分工合作，主要负责对ARIMA模型的改进工作。目前对该模型认为可以进行模型的优化以及其他预测模型的替换。优化可以从机器学习着手，也可以从
气温波动周期来进行时段划分，其他模型目前有单变量回归模型，基于LinearRegression实现的多变量线性回归模型，基于成本函数和梯度下降实现的多变量线性回归模型，一阶线性拟合，二阶曲线拟合，三阶曲线拟合，
线性回归预测模型，基于协方差-方差公式实现的线性回归模型，基于成本函数和批量梯度下降算法实现的线性回归模型，基于SGDRegressor随机梯度下降算法的实现，使用LogisticRegression进行逻辑回归模型，
基于成本函数和梯度下降算法进行逻辑回归模型，基于scipy.optimize优化运算库实现对数几率回归模型。接下来的工作包括测试不同模型的效率与准确度，将其核心内容应用到原有模型中，起到优化的目的，使得
预测的天气更加准确可信。当前仍在不同模型的了解与比较中。

2020.7.3
在尝试过ARIMA模型之后，发现该模型的预测数据的mse值相对来说偏大很多，因此该模型必须被优化或者替代，否则预测出来的气温毫无意义，因此
今天的工作仍然是学习各种预测模型与机器深度学习方法，达到降低mse值的目的，且目标应当在数值1以下。
在处理清洗过后的数据的时候，今天上午我主要学习并采用了线性回归预测模型，当计算其直线拟合度时R方数值并不理想，最终决定暂时搁置。
下午着重学习了循环神经网络内容，并计划将清洗后的数据尝试利用神经网络深度学习来进行模型预测，但是目前看来深度学习需要大量的数值
以及其他相关数值，相比之下较为复杂，暂时还没更改出适合目前清洗后数据的代码函数，晚上应当会尝试简化模型以调用只气温温度的预测模型。

2020.7.4
今天学习并利用了LSTM模型（长短时记忆），通过该模型对大量测试数据的学习，来预测一定时间内的气温温度。该模型对于数据量要求较大，
越多的数据预测的结果越准确，但是由于气温可能出现特别变化，预测结果与实际结果相比总是接近而不同，如果遇到特殊气温转折点情况，可
能导致误差较大，目前该模型已经可以正常读取数据并预测，但是仍可进一步优化来确保准确度。

2020.7.5
基于昨日的LSTM模型以及所采用的数据集，今日尝试了与LSTM工作原理相同的GRU，相比之下，GRU更加简化且运行代价更低，对于大数据的处理，
采用GRU无疑可以减轻计算机的工作负担。（相关代码new.py已上传）
在GRU模型中，dropout循环使得神经网路更加准确，对于任务中的气温预测也是一样，可以大幅度减少ARIMA模型所带来的误差，当前模型已经可以
正常计算误差值，误差缩小到个位数。

2020.7.6
在经过答辩之后，深度学习了LSTM的变种模型GRU，也对比学习了各种误差评估函数，例如MSE、RMSE以及相关的归一化与反归一化，对于各种误差评判标准
有了一定认知了解，所以针对GRU模型输出的结果可以更加清晰的明白其含义，方便改进机器学习。对于GRU模型的实际操作中，将历年的数据带入最终输出的
结果loss值已经在0.1以下，但是当处理大量数据时，会发生计算机死机状况，导致今天重启电脑十余次，在数十次次epoch学习中，计算仍能够较快进行，但是在计算
RMSE时，往往因为复杂的计算导致内存过高死机，暂时还没有解决此问题，甚至不太敢运行程序。需要优化这里。

2020.7.7
在运行GRU模型时，以为采用的model.compile中设置参数太少，导致运行过程中一度出现过拟合现象，使得训练意义下降，困扰了很长时间。
学习了利用HISTORY保存model.fit的运行结果，并根据history进行绘图表达。
研究model.compile的各种loss设定，最终采用mse，在此之前，演算了mae与mse之间的关系，来确认真实计算了mse数值。
loss下降，val_test徘徊，说明模型当前达到极限，进一步的优化只能是更改函数内部结构，暂时无法完成。
当前通过epoch得到的loss值保持在0.1附近，但是读取数据时出现csv中的数值被认为str的情况，可能是因为csv的格式丢失导致。

2020.7.8
由于不同的数据集导致csv中储存的数值类型不同，在使用GRU模型导入的时候不能很好地适配，为了解决该问题，尝试了多种文件读取方式，
经过一天的实践，目前可以直接以float读入或者str读入然后更改为float类型，但是在后续已有函数处理中，两种结合时存在数组不对称的情况，
使得range中的start和end以及步数step不能正常进行而出错，现在考虑重新清洗数据来获得所需要的类型。

2020.7.9
经过一天的奋战，终于解决了数据读入问题，原因是在csv文件中的最后一行存在空行，该空行难以察觉，但是读入的时候会被当做空数值读入，导致数组
出现不匹配问题，因此报出多种错误，包括但不限于维度不匹配、字符无法转换成数值，经过修改，已经可以正常读入数据，并且根据数据训练模型，最后
的工作是如何将预测数值以csv文件形式输出并传输到前端，等待继续的努力。（终于匹配了，开心）

2020.7.10
经过实际数据带入测试，发现在model.add中对GRU参数的设置使用简单函数Sequential时格式要求十分繁琐，但是也可以通过model.predict输出结果，
因此想要继续改进，找到了Torch下的不同GRU应用，相比于keras较为繁琐，暂时没能处理好该模型的输入输出，二者之间的对比还是倾向于前者，毕竟
内容较为熟悉，对于结构把握准确， 只是简化的过程中还没能处理好，导致资源浪费。

2020.7.11
2:00每当运行model.predict计算预测值，程序总是既不报错也不进行，卡在计算中，处理了很久也没有结果，包括修改周期、预期、步数、样本数，
现打算挂机一晚上试试效果，早上起来验收。
9:00早上起床验收发现效果并不好，因为大量数据导致难以运行，因此决定返回最初的ARIMA模型，并对其进行优化。
通过资料查询，发现一种季节性的ARIMA模型可以采用，因为气温变化存在一定的季节周期性。
在除去p,d,q以外，模型还需要引入季节性部分。
与非季节性模型的区别在于，季节性模型都是以m为固定周期来做计算的，比如D就是季节性差分，
是用当前值减去上一个季节周期的值，P和Q和非季节性的p,q的区别也是在于前者是以季节窗口为单位，而后者是连续时间的。
然后下午通过修改循环将数据集，将数据集分割输出，并循环预测，将结果存入一个数据集。








